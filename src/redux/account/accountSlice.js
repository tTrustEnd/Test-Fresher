import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
isAuthenticated:false,
isLoading:true,
user:{
    email: '',
    phone: "",
    "fullName": "",
    "role": "",
    "avatar": "",
    "id": ""
},
avataTemplace:''
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const accountSlice = createSlice({
  name: 'account',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    doLoginAction: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.isAuthenticated=true;
      state.isLoading=false;
      state.user=action.payload;
     
    },
    doGetAccount: (state, action) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        let users = state.user
        let tem = state.avataTemplace
        console.log('check 2e312',action.payload)
        console.log('checl tem',tem)
        users.avatar = action.payload.avatar
        state.isAuthenticated=true;
        state.isLoading=false;
        state.user=action.payload.user;
        state.avataTemplace = action.payload.avatar

      },
      doLogoutAction: (state, action) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        localStorage.removeItem('access_token');
        state.isAuthenticated=false
        state.isLoading=true;
        state.user={
          email: '',
          phone: "",
          "fullName": "",
          "role": "",
          "avatar": "",
          "id": ""
      }
      },
      doUpdateDetail: (state, action) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
      // localStorage.removeItem('access_token')
        state.user.fullName=action.payload.fullName;
        state.user.phone=action.payload.phone;
        state.user.avatar =action.payload.avatar;
      },
      doUploadAvtAc: (state,action) => {
        state.user.avatar =action.payload.avatar;
        state.avataTemplace=action.payload.avatar
        console.log('sadawdawds',state.avataTemplace)
      },
      doViewPreUpload: (state,action) => {
        state.user.avatar = action.payload.avatar
        state.avataTemplace =action.payload.avatar
      }

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { doLoginAction ,doGetAccount,doUpdateDetail,doUploadAvtAc,doViewPreUpload,doLogoutAction } = accountSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default accountSlice.reducer;
